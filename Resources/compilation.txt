So I think I've kinda figured it out, it'll be pretty much a stack machine with 
pre-allocated function arguments. I'm not compleeeeetely sure how it will work
out, but it'll be okay (I'll plan here in the future)

The time has come - I need to figure out how to do memory management (particularly
because I am currently doing arrays). I'm not planning to be memory efficient, and
probably anything greater than 64 bits will be heap allocated (using C stdlib lol),
but at the same time I don't want to create memory leaks - even (especially!) an 
educational project should be well thought through.

So, the current idea is - anything that's allocated on the stack - I don't care about.
So int/bool/other future types will be stack allocated, which automatically makes memory
management quite easy. I wonder what I should do with pointers though - for example,
if you return a pointer to the stack frame, it might cause some funny stuff. One solution
is to set such pointers to null, which, now that I think about it, causes even more
problems. There are a lot of problems stemming from mutating the pointer variable - picture
a code like this:

    let int a = 5
    let int@ ap = @a

    if(random()) {
        let@ int b = 5 # Hypothetical heap allocation syntax
        mut ap = b
    }

    ret ap

so after returning, ap can point both to a stack value and a heap value, and good luck 
statically-analyzing that shit (afaik, this similar to the whole Rust's explicit lifetimes
bullshit).

Another option is to go the C way and simply not give a shit - wanna get a dangling pointer,
no problem.

We could also simply forbid to create pointers manually, with heap allocation being the only
source of them, but I don't really like that either. If you wanna do smth like

    let int a = 5
    inc(@a)

you need to instead do this

    let int a = 5
    let@ int b = a
    inc(b)
    # free b

which feels like a workaround, rather than a sefety conveniency.

We could also make pointers completely immutable... make stack pointers nullify on exit, and
keep heap pointers? So no matter which one you return, you will either get a valid pointer, or
a NULL pointer, since it is statically decided.

But then you're fucked if you want to, well, mutate the pointer.

Maybe allow for mutation, but forbid mixing stack and heap pointers? So like

    let int a = 5
    let int b = 3
    let@ int ah = 5
    let@ int bh = 3

    let int ap = @a
    mut ap = @b # Ok
    mut ah = bh # Ok
    mut ap = ah # Compile error?
    mut ah = ap # Compile error?

In the end I decided to do it the C way, because fuck all that nerd shit. Through maybe I can add 
immutable argument passing to functions, I don't think it's all that difficult (clueless)

Though now, with pointers out of the way, I have an even more pressing problem - how the hell do I do
the arrays? Arrays will be wide pointers, that's for sure, but how is that implemented? I don't really
want to handle pushing the 128-bit value to the stack lol

So I guess it'll simply be double dereferencing (pointer -> (length, pointer) -> array), which I'm not
really sure is the greatest approach, but I can't think of anything better.

If it is not clear why I'm doubtful - the array itself, obviously, will be allocated by C malloc, but
I don't know how to handle the (length, pointer) tuple - also malloc or what?

This also kinda goes into the problem of differently sized types... 

I probably should just for variables to take up more than 64 bits on the stack each, but that'll take work.
I could also make this work with arrays, which is great ([rax + offset * size])

But I also *definitely* need to handle less than 64-bit values, so that I'll have at least a change at
using C strings. On the stack they'll pretty much take up the entire 64-bits, but in the array they'll
need to be compressed

So yeah, I'll probably do that and even go kinda further - allow for init/readonly fields, since that is
necessary for the arrays to work properly (imagine you could set the array's length lol). Pretty much it
forbids you from assigning to the field directly, and from creating a pointer to it, leaving you no way
to do your dirty deeds. This, of course, gets destroyed by reinterpret casting (when I hopefully add it),
but who cares, at least you'll have to fuck around to mess up your array.

After that, I suppose, it won't be that hard to get basic structs working. Then I add the ability to create
C mappings and everyone will be happy!

Also, one more pressing moment - so I've decided how to create the arrays, but not on how to destroy (free)
them. Currently I have the following idea:

    let int x = 5 # Just stack allocation, nothing interesting
    let@ int x = 5 # Heap allocation, doesn't get automatically freed, also x is int@ despite how it looks
    let int[] xs = [] # Heap allocation, gets freed at the end of the block
    let@ int[] xs = [] # Heap allocation, doesn't get freed, and unlike int, it is still an int[], not an int[]@

This is cool and all - I would need to create some defer-like functionality (might add it regardless, it is
quite useful), but what if we do smth like this:
    
    let int[][] x = [[1, 2], [3, 4]]
    let@ int[][] x = [[1, 2], [3, 4], [5, 6]]

The latter one is obvious, we just don't bother. The first one is more difficult - do we deallocate the inner
arrays, and if we do, how do we recursively retrieve them? What if it is actually an array of objects, which
have initialized arrays inside of them?

We could go about it like this:

    let int[][] x = [%[1, 2], %[3, 4], %[5, 6]]

But I dunnnooooo, seems kinda sussy

Probably what we should do, is to only care about nested arrays, and not about the nested objects, for which
there will be smth different, for example

    let obj[] xs = [#obj{ x = [] }]
    let obj[] xs = [#obj{ @x = [] }]

kinda imitating the let/let@ thing (obj constructor syntax is purely speculative for now)

Though, still, the fuck do we do in a situation like this:

    call someCoolFunction([1, 2, 3])

The array in this example is obviously "stack" allocated, but what if we want it to be heap allocated?

I mean, we could also simply not bother and require the user to free all of their stuff, but idk, I don't
like how it feels... A lot of the times you need temp arrays for smth quick, and freeing them like that looks
uncool

Since we allow the pointer operator only for Id lookahead, we are allowed to do something like this:

    let int[][] = [[1, 2], [3, 4]] # Recursively checked for freeing
    let@ int[][] = [[1, 2], [3, 4]] # Recursively not given a shit about
    call someFunction([1, 2, 3]) # Recursively checked for freeing
    call someFunction(@[1, 2, 3]) # Same as let@

This does allow for some repeating, from the example above these

    let obj[] xs = [#obj{ @x = [] }]
    let obj[] xs = [#obj{ x = @[] }]

would be equivalent... maybe it makes sense then to not include the first variant of the syntax

Also, there is a question of mixed cases... You probably can do something like this:

    [@[1, 2], @[3, 4]]

but I don't want to go any deeper that way, especially not specifying the "don't free the outer one, but
free the inner one" stuff - that's just ridiculous, if you want that just do it yourself

So I guess I'm settled on this syntax (unless I change my mind after sleeping, it's 3AM lol)

    let int[][] = [[1, 2], [3, 4]] # Free the arrays at the end of the block
    let@ int[][] = [[1, 2], [3, 4]] # Don't do anything to them
    let int[][] = [@[1, 2], @[3, 4]] # Free all arrays not marked with @
    call someFunction(@[[1, 2], [3, 4]]) # The previous one is probably recursive

And if you want smth else just do it in a loop

It just occurred to me... How do we keep track of what to deallocate? We can free the variables, but
what about recursive frees, or arrays that you've lost the pointer to?

This is actually tough... We need to keep track of our allocations after point X (after block start) and
deallocate everything at the end of the block. We could do that by having a separate stack of pointers,
push NULL on block enter, and at block exit push until NULL, but where do we store this other stack? Do we
just implement vector in asm at this point? 

Also an important note - this stack must keep pointers to pointers, so that it will automatically set them
to null in case some dum dum tries to return that (though this also poses some problems, i.e. reassignment)

I've thought about it more - perhaps fuck the pointers to pointers thing, since it will be an even bigger pain
in the ass to store them I think

Even more thinking after - let@ should work the same with arrays, and @[] will be used to protect it from
"gc". It just makes the syntax more consistent
